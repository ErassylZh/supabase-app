basePath: /
definitions:
  admin.AddCollection:
    properties:
      collection_id:
        type: integer
      post_id:
        type: integer
    type: object
  admin.AddHashtag:
    properties:
      hashtag_id:
        type: integer
      post_id:
        type: integer
    type: object
  admin.AddProductProductTag:
    properties:
      product_id:
        type: integer
      product_tag_id:
        type: integer
    type: object
  admin.CreateCollection:
    properties:
      image:
        $ref: '#/definitions/admin.Image'
      image_kz:
        $ref: '#/definitions/admin.Image'
      image_ru:
        $ref: '#/definitions/admin.Image'
      is_recommendation:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
    type: object
  admin.CreateContestBook:
    properties:
      body:
        type: string
      body_en:
        type: string
      body_kz:
        type: string
      contest_coins:
        type: integer
      contest_id:
        type: integer
      count_of_questions:
        type: integer
      day_number:
        type: integer
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      image:
        $ref: '#/definitions/admin.Image'
      point:
        type: integer
      status:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
    type: object
  admin.CreateContestPrize:
    properties:
      contest_id:
        type: integer
      image:
        $ref: '#/definitions/admin.Image'
      number:
        type: integer
      prize_name:
        type: string
    type: object
  admin.CreateHashtag:
    properties:
      image:
        $ref: '#/definitions/admin.Image'
      is_visible:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
    type: object
  admin.CreatePost:
    properties:
      body:
        type: string
      company:
        type: string
      description:
        type: string
      image:
        $ref: '#/definitions/admin.Image'
      language:
        type: string
      logo:
        $ref: '#/definitions/admin.Image'
      point:
        type: integer
      quiz_time:
        type: integer
      rating_status:
        type: string
      read_time:
        type: integer
      sapphire:
        type: integer
      short_description:
        type: string
      title:
        type: string
    type: object
  admin.CreateProduct:
    properties:
      contacts:
        type: string
      contacts_en:
        type: string
      contacts_kz:
        type: string
      count:
        type: integer
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      discount:
        type: string
      discount_en:
        type: string
      discount_kz:
        type: string
      logo:
        $ref: '#/definitions/admin.Image'
      offer:
        type: string
      offer_en:
        type: string
      offer_kz:
        type: string
      point:
        type: integer
      product_type:
        type: string
      sapphire:
        type: integer
      sell_type:
        type: string
      sku:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
    type: object
  admin.CreateProductTag:
    properties:
      name:
        type: string
      name_en:
        type: string
      name_kz:
        type: string
    type: object
  admin.CreateStories:
    properties:
      end_time:
        type: string
      icon:
        $ref: '#/definitions/admin.Image'
      start_time:
        type: string
      title:
        type: string
    type: object
  admin.DeleteCollectionPost:
    properties:
      collection_id:
        type: integer
      post_id:
        type: integer
    type: object
  admin.DeleteHashtagPost:
    properties:
      hashtag_id:
        type: integer
      post_id:
        type: integer
    type: object
  admin.DeleteProductProductTag:
    properties:
      product_id:
        type: integer
      product_tag_id:
        type: integer
    type: object
  admin.Image:
    properties:
      file:
        type: string
      filename:
        type: string
    type: object
  admin.UpdateCollection:
    properties:
      collection_id:
        type: integer
      image:
        $ref: '#/definitions/admin.Image'
      image_kz:
        $ref: '#/definitions/admin.Image'
      image_ru:
        $ref: '#/definitions/admin.Image'
      is_recommendation:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
    type: object
  admin.UpdateContest:
    properties:
      consolation_prize_sapphire:
        type: integer
      contest_id:
        type: integer
      end_time:
        type: string
      is_active:
        type: boolean
      start_time:
        type: string
    type: object
  admin.UpdateContestBook:
    properties:
      body:
        type: string
      body_en:
        type: string
      body_kz:
        type: string
      contest_book_id:
        type: integer
      contest_coins:
        type: integer
      count_of_questions:
        type: integer
      day_number:
        type: integer
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      image:
        $ref: '#/definitions/admin.Image'
      point:
        type: integer
      status:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
    type: object
  admin.UpdateContestPrize:
    properties:
      contest_prize_id:
        type: integer
      image:
        $ref: '#/definitions/admin.Image'
      number:
        type: integer
      prize_name:
        type: string
    type: object
  admin.UpdateHashtag:
    properties:
      hashtag_id:
        type: integer
      image:
        $ref: '#/definitions/admin.Image'
      is_visible:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
    type: object
  admin.UpdatePost:
    properties:
      body:
        type: string
      company:
        type: string
      description:
        type: string
      image:
        $ref: '#/definitions/admin.Image'
      language:
        type: string
      logo:
        $ref: '#/definitions/admin.Image'
      point:
        type: integer
      post_id:
        type: integer
      quiz_time:
        type: integer
      rating_status:
        type: string
      read_time:
        type: integer
      sapphire:
        type: integer
      short_description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  admin.UpdateProduct:
    properties:
      contacts:
        type: string
      contacts_en:
        type: string
      contacts_kz:
        type: string
      count:
        type: integer
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      discount:
        type: string
      discount_en:
        type: string
      discount_kz:
        type: string
      logo:
        $ref: '#/definitions/admin.Image'
      offer:
        type: string
      offer_en:
        type: string
      offer_kz:
        type: string
      point:
        type: integer
      product_id:
        type: integer
      product_type:
        type: string
      sapphire:
        type: integer
      sell_type:
        type: string
      sku:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
    type: object
  admin.UpdateStories:
    properties:
      end_time:
        type: string
      icon:
        $ref: '#/definitions/admin.Image'
      start_time:
        type: string
      stories_id:
        type: integer
      title:
        type: string
    type: object
  model.Balance:
    properties:
      balance_id:
        type: integer
      coins:
        type: integer
      sapphires:
        type: integer
      user_id:
        type: string
    type: object
  model.Collection:
    properties:
      collection_id:
        type: integer
      image_path:
        type: string
      image_path_kz:
        type: string
      image_path_ru:
        type: string
      is_recommendation:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
    type: object
  model.Contest:
    properties:
      code:
        type: string
      consolation_prize_sapphire:
        type: integer
      contest_books:
        items:
          $ref: '#/definitions/model.ContestBook'
        type: array
      contest_id:
        type: integer
      contest_participants:
        items:
          $ref: '#/definitions/model.ContestParticipant'
        type: array
      created_at:
        type: string
      end_time:
        type: string
      is_active:
        type: boolean
      start_time:
        type: string
      updated_at:
        type: string
    type: object
  model.ContestBook:
    properties:
      body:
        type: string
      body_en:
        type: string
      body_kz:
        type: string
      contest_book_id:
        type: integer
      contest_coins:
        type: integer
      contest_history:
        items:
          $ref: '#/definitions/model.ContestHistory'
        type: array
      contest_id:
        type: integer
      count_of_questions:
        type: integer
      created_at:
        type: string
      day_number:
        type: integer
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      photo_path:
        type: string
      point:
        type: integer
      status:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
      updated_at:
        type: string
    type: object
  model.ContestHistory:
    properties:
      contest_book_id:
        type: integer
      contest_history_id:
        type: integer
      contest_id:
        type: integer
      created_at:
        type: string
      points:
        type: integer
      read_time:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.ContestParticipant:
    properties:
      contest_id:
        type: integer
      contest_participant_id:
        type: integer
      contest_prize_id:
        type: integer
      created_at:
        type: string
      number:
        type: integer
      points:
        type: integer
      prize_get:
        type: boolean
      read_time:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.ContestPrize:
    properties:
      contest_id:
        type: integer
      contest_prize_id:
        type: integer
      created_at:
        type: string
      number:
        type: integer
      photo_path:
        type: string
      prize_name:
        type: string
      updated_at:
        type: string
    type: object
  model.Hashtag:
    properties:
      hashtag_id:
        type: integer
      image_path:
        type: string
      is_visible:
        type: boolean
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
      posts:
        items:
          $ref: '#/definitions/model.Post'
        type: array
    type: object
  model.Image:
    properties:
      created_at:
        type: string
      file_name:
        type: string
      image_id:
        type: integer
      post_id:
        type: integer
      product_id:
        type: integer
      type:
        type: string
      url:
        type: string
    type: object
  model.Mark:
    properties:
      created_at:
        type: string
      mark_id:
        type: integer
      post:
        $ref: '#/definitions/model.Post'
      post_id:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Order:
    properties:
      buyer_id:
        type: string
      created_at:
        type: string
      order_id:
        type: integer
      order_products:
        items:
          $ref: '#/definitions/model.OrderProduct'
        type: array
      updated_at:
        type: string
    type: object
  model.OrderProduct:
    properties:
      coins:
        type: integer
      created_at:
        type: string
      order_id:
        type: integer
      order_product_id:
        type: integer
      product:
        $ref: '#/definitions/model.Product'
      product_id:
        type: integer
      product_type:
        type: string
      quantity:
        type: integer
      sapphires:
        type: integer
      sku:
        type: string
      updated_at:
        type: string
    type: object
  model.Post:
    properties:
      body:
        type: string
      code:
        type: string
      collections:
        items:
          $ref: '#/definitions/model.Collection'
        type: array
      company:
        type: string
      created_at:
        type: string
      description:
        type: string
      hashtags:
        items:
          $ref: '#/definitions/model.Hashtag'
        type: array
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      language:
        type: string
      point:
        type: integer
      post_id:
        type: integer
      post_order:
        type: integer
      quiz_time:
        type: integer
      rating_status:
        type: string
      read_time:
        type: integer
      sapphire:
        type: integer
      short_description:
        type: string
      status:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  model.PrivacyTerms:
    properties:
      content:
        type: string
      privacy_terms_id:
        type: integer
      status:
        type: string
      type:
        type: string
    type: object
  model.Product:
    properties:
      airtable_product_id:
        type: string
      contacts:
        type: string
      contacts_en:
        type: string
      contacts_kz:
        type: string
      count:
        type: integer
      created_at:
        type: string
      description:
        type: string
      description_en:
        type: string
      description_kz:
        type: string
      discount:
        type: string
      discount_en:
        type: string
      discount_kz:
        type: string
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      offer:
        type: string
      offer_en:
        type: string
      offer_kz:
        type: string
      point:
        type: integer
      product_id:
        type: integer
      product_tags:
        items:
          $ref: '#/definitions/model.ProductTag'
        type: array
      product_type:
        type: string
      sapphire:
        type: integer
      sell_type:
        type: string
      sku:
        type: string
      status:
        type: string
      title:
        type: string
      title_en:
        type: string
      title_kz:
        type: string
    type: object
  model.ProductTag:
    properties:
      image_path:
        type: string
      name:
        type: string
      name_kz:
        type: string
      name_ru:
        type: string
      product_tag_id:
        type: integer
    type: object
  model.Profile:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  model.PushNotification:
    properties:
      condition:
        type: string
      created_at:
        type: string
      is_sended:
        type: boolean
      push_notification_id:
        type: integer
      text:
        type: string
      title:
        type: string
      token:
        type: string
      topic:
        type: string
    type: object
  model.ReferralCode:
    properties:
      created_at:
        type: string
      referral_code:
        type: string
      referral_code_id:
        type: integer
      user_id:
        type: string
    type: object
  model.Stories:
    properties:
      created_at:
        type: string
      end_time:
        type: string
      icon_path:
        type: string
      start_time:
        type: string
      stories_id:
        type: integer
      story_pages:
        items:
          $ref: '#/definitions/model.StoryPage'
        type: array
      title:
        type: string
    type: object
  model.StoryPage:
    properties:
      created_at:
        type: string
      image_path:
        type: string
      is_readed:
        type: boolean
      page_order:
        type: integer
      stories_id:
        type: integer
      story_page_id:
        type: integer
      text:
        type: string
      uuid:
        type: string
    type: object
  model.Transaction:
    properties:
      coins:
        type: integer
      created_at:
        type: string
      outer_id:
        type: integer
      reason:
        type: string
      sapphires:
        type: integer
      transaction_id:
        type: integer
      transaction_type:
        type: string
      user_id:
        type: string
    type: object
  model.User:
    properties:
      confirmation_send_at:
        type: string
      confirmation_token:
        type: string
      email:
        type: string
      email_confirmed_at:
        type: string
      encrypted_password:
        type: string
      id:
        type: string
      profile:
        $ref: '#/definitions/model.Profile'
    type: object
  model.UserDeviceToken:
    properties:
      device_token:
        type: string
      user_device_token_id:
        type: integer
      user_id:
        type: string
    type: object
  model.UserPost:
    properties:
      created_at:
        type: string
      post_id:
        type: integer
      quiz_points:
        type: integer
      quiz_sapphires:
        type: integer
      read_end:
        type: boolean
      user_id:
        type: string
      user_post_id:
        type: integer
    type: object
  schema.ArchivePost:
    properties:
      body:
        type: string
      code:
        type: string
      collections:
        items:
          $ref: '#/definitions/model.Collection'
        type: array
      company:
        type: string
      created_at:
        type: string
      description:
        type: string
      earned_coins:
        type: integer
      earned_sapphires:
        type: integer
      hashtags:
        items:
          $ref: '#/definitions/model.Hashtag'
        type: array
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      language:
        type: string
      point:
        type: integer
      post_id:
        type: integer
      post_order:
        type: integer
      quiz_passed:
        type: boolean
      quiz_time:
        type: integer
      rating_status:
        type: string
      read_time:
        type: integer
      sapphire:
        type: integer
      short_description:
        type: string
      status:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  schema.CheckAvailable:
    properties:
      already_used_referral_code:
        type: boolean
    type: object
  schema.ContestActivity:
    properties:
      active:
        items:
          $ref: '#/definitions/schema.ContestData'
        type: array
      ended:
        items:
          $ref: '#/definitions/schema.ContestResultPrize'
        type: array
    type: object
  schema.ContestData:
    properties:
      already_joined:
        type: boolean
      contest_id:
        type: integer
      current_day_number:
        type: integer
      end_time:
        type: string
      start_date:
        type: string
      total_users_count:
        type: integer
    type: object
  schema.ContestResultPrize:
    properties:
      consolation_prize_sapphire:
        type: integer
      contest_id:
        type: integer
      number:
        type: integer
      prize:
        $ref: '#/definitions/model.ContestPrize'
    type: object
  schema.CreateMark:
    properties:
      post_id:
        type: integer
    type: object
  schema.Empty:
    type: object
  schema.JoinContestRequest:
    properties:
      contest_id:
        type: integer
    type: object
  schema.PassQuizPost:
    properties:
      post_id:
        type: integer
      quiz_points:
        type: integer
      quiz_sapphires:
        type: integer
    type: object
  schema.PostResponse:
    properties:
      body:
        type: string
      code:
        type: string
      collections:
        items:
          $ref: '#/definitions/model.Collection'
        type: array
      company:
        type: string
      created_at:
        type: string
      description:
        type: string
      hashtags:
        items:
          $ref: '#/definitions/model.Hashtag'
        type: array
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      is_already_read:
        type: boolean
      is_marked:
        type: boolean
      language:
        type: string
      mark_id:
        type: integer
      point:
        type: integer
      post_id:
        type: integer
      post_order:
        type: integer
      post_type:
        type: string
      quiz_passed:
        type: boolean
      quiz_time:
        type: integer
      rating_status:
        type: string
      read_time:
        type: integer
      sapphire:
        type: integer
      short_description:
        type: string
      status:
        type: string
      title:
        type: string
      uuid:
        type: string
    type: object
  schema.PostResponseByGroup:
    properties:
      bestsellers:
        items:
          $ref: '#/definitions/schema.PostResponse'
        type: array
      continue_reading:
        items:
          $ref: '#/definitions/schema.PostResponse'
        type: array
      partners:
        items:
          $ref: '#/definitions/schema.PostResponse'
        type: array
    type: object
  schema.ProductBuyRequest:
    properties:
      product_id:
        type: integer
    type: object
  schema.ReadContestRequest:
    properties:
      contest_book_id:
        type: integer
      read_time:
        type: integer
      right_questions:
        type: integer
    type: object
  schema.ReadPost:
    properties:
      end:
        type: boolean
      post_id:
        type: integer
    type: object
  schema.ReadPostRequest:
    properties:
      end_reading:
        type: boolean
      post_id:
        type: integer
    type: object
  schema.Response-array_model_Collection:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Collection'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Contest:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Contest'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_ContestBook:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.ContestBook'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_ContestPrize:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.ContestPrize'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Hashtag:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Hashtag'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Mark:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Mark'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Order:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_PrivacyTerms:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.PrivacyTerms'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Product:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_ProductTag:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.ProductTag'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_PushNotification:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.PushNotification'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Stories:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Stories'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_Transaction:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.Transaction'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_model_UserDeviceToken:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/model.UserDeviceToken'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_schema_ArchivePost:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/schema.ArchivePost'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_schema_ContestData:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/schema.ContestData'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-array_schema_PostResponse:
    properties:
      message:
        type: string
      result:
        items:
          $ref: '#/definitions/schema.PostResponse'
        type: array
      status:
        type: boolean
    type: object
  schema.Response-model_Balance:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Balance'
      status:
        type: boolean
    type: object
  schema.Response-model_Collection:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Collection'
      status:
        type: boolean
    type: object
  schema.Response-model_Contest:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Contest'
      status:
        type: boolean
    type: object
  schema.Response-model_ContestBook:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.ContestBook'
      status:
        type: boolean
    type: object
  schema.Response-model_Hashtag:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Hashtag'
      status:
        type: boolean
    type: object
  schema.Response-model_Mark:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Mark'
      status:
        type: boolean
    type: object
  schema.Response-model_Post:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Post'
      status:
        type: boolean
    type: object
  schema.Response-model_Product:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Product'
      status:
        type: boolean
    type: object
  schema.Response-model_ProductTag:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.ProductTag'
      status:
        type: boolean
    type: object
  schema.Response-model_ReferralCode:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.ReferralCode'
      status:
        type: boolean
    type: object
  schema.Response-model_Stories:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.Stories'
      status:
        type: boolean
    type: object
  schema.Response-model_User:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.User'
      status:
        type: boolean
    type: object
  schema.Response-model_UserDeviceToken:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.UserDeviceToken'
      status:
        type: boolean
    type: object
  schema.Response-model_UserPost:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/model.UserPost'
      status:
        type: boolean
    type: object
  schema.Response-schema_CheckAvailable:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.CheckAvailable'
      status:
        type: boolean
    type: object
  schema.Response-schema_ContestActivity:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.ContestActivity'
      status:
        type: boolean
    type: object
  schema.Response-schema_Empty:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.Empty'
      status:
        type: boolean
    type: object
  schema.Response-schema_PostResponseByGroup:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.PostResponseByGroup'
      status:
        type: boolean
    type: object
  schema.Response-schema_ReadContestRequest:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.ReadContestRequest'
      status:
        type: boolean
    type: object
  schema.Response-schema_ReadPostRequest:
    properties:
      message:
        type: string
      result:
        $ref: '#/definitions/schema.ReadPostRequest'
      status:
        type: boolean
    type: object
  schema.UserDeviceTokenCreateRequest:
    properties:
      token:
        type: string
    type: object
  schema.UserUpdate:
    properties:
      avatar_photo:
        type: string
      nickname:
        type: string
    type: object
  v1.TokenData:
    properties:
      token:
        type: string
    type: object
host: 157.90.227.125:8000
info:
  contact: {}
  description: Это пример сервера с использованием Swagger в Gin.
  title: swagger API
  version: "1.0"
paths:
  /all/:
    get:
      consumes:
      - application/json
      description: Сокет для получения рейтинга всех участников в контесте (ws://host:port/ws/v1/all?)
      parameters:
      - description: JWT Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/v1.TokenData'
      produces:
      - application/json
      responses: {}
      summary: WebSocket for rating aggregation
      tags:
      - WebSocket
  /api/v1/admin/post:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удалить пост
      tags:
      - post
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: по айдищке пост
      tags:
      - post
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать пост
      tags:
      - post
    put:
      consumes:
      - application/json
      parameters:
      - description: UserLogin data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: обновить пост
      tags:
      - post
  /api/v1/admin/product:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удолит продукт
      tags:
      - product
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать продукт
      tags:
      - product
    put:
      consumes:
      - application/json
      parameters:
      - description: UserLogin data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: абнавить продукт
      tags:
      - product
  /api/v1/admin/product-tag:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удалить тег продукта (для фильтра)
      tags:
      - product
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateProductTag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ProductTag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать тег продукта (для фильтра)
      tags:
      - product
    put:
      consumes:
      - application/json
      parameters:
      - description: UserLogin data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: обновить тег продукта (для фильтра)
      tags:
      - product
  /api/v1/admin/product-tag/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.AddProductProductTag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ProductTag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: добавить/связать тег к продукту  (для фильтра)
      tags:
      - product
  /api/v1/admin/product-tag/product:
    delete:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.DeleteProductProductTag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ProductTag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить связку тег к продукту
      tags:
      - product
  /api/v1/admin/product/id:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: палушит продукт по айди
      tags:
      - product
  /api/v1/balance:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Balance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить баланс
      tags:
      - balance
  /api/v1/balance/history:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить историю транзакций
      tags:
      - balance
  /api/v1/collection:
    delete:
      consumes:
      - application/json
      parameters:
      - description: collection_id
        in: query
        name: collection_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить коллекцию
      tags:
      - collection
    get:
      consumes:
      - application/json
      parameters:
      - description: language
        in: query
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить все коллекций
      tags:
      - collection
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать коллекцию
      tags:
      - collection
    put:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: обновить коллекцию
      tags:
      - collection
  /api/v1/collection/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.AddCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: добавить пост в коллекцию
      tags:
      - collection
  /api/v1/collection/delete-post:
    delete:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.DeleteCollectionPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить пост из коллекцию
      tags:
      - collection
  /api/v1/collection/id:
    get:
      consumes:
      - application/json
      parameters:
      - description: collection_id
        in: query
        name: collection_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить коллекцию
      tags:
      - collection
  /api/v1/contest:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: contest_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удолит продукт
      tags:
      - contest
    get:
      consumes:
      - application/json
      parameters:
      - description: contest_id
        in: query
        name: contest_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_schema_ContestData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить активные контесты
      tags:
      - contest
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
    put:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateContest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
  /api/v1/contest/active:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_ContestActivity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить активные контесты
      tags:
      - contest
  /api/v1/contest/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удолит продукт
      tags:
      - contest
  /api/v1/contest/book:
    get:
      consumes:
      - application/json
      parameters:
      - description: contest_id
        in: query
        name: contest_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_ContestBook'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить книги контеста
      tags:
      - contest
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateContestBook'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
    put:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateContestBook'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
  /api/v1/contest/book/by-id:
    get:
      consumes:
      - application/json
      parameters:
      - description: contest_book_id
        in: query
        name: contest_book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ContestBook'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить книги контеста
      tags:
      - contest
  /api/v1/contest/books:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: contest_book_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удолит продукт
      tags:
      - contest
  /api/v1/contest/join:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateMark
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.JoinContestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: подключиться к розыгрышу
      tags:
      - contest
  /api/v1/contest/prize:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: contest_prize_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удолит продукт
      tags:
      - contest
    get:
      consumes:
      - application/json
      parameters:
      - description: contest_id
        in: query
        name: contest_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_ContestPrize'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить призы контеста
      tags:
      - contest
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateContestPrize'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
    put:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateContestPrize'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Contest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать contest
      tags:
      - contest
  /api/v1/contest/read:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateMark
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.ReadContestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_ReadContestRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: Прочесть контест книгу
      tags:
      - contest
  /api/v1/hashtag:
    delete:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить хештег
      tags:
      - hashtag
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Hashtag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить все хештеги
      tags:
      - hashtag
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateHashtag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Hashtag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать хештеги
      tags:
      - hashtag
    put:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateHashtag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: обновить хештег
      tags:
      - hashtag
  /api/v1/hashtag/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.AddHashtag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Hashtag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: добавить пост в хештег
      tags:
      - hashtag
  /api/v1/hashtag/delete-post:
    delete:
      consumes:
      - application/json
      parameters:
      - description: CreatePost data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.DeleteHashtagPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Hashtag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить пост в хештег
      tags:
      - hashtag
  /api/v1/hashtag/id:
    get:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Hashtag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получть хештеги по айдишке епта
      tags:
      - hashtag
  /api/v1/mark:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateMark
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.CreateMark'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Mark'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: сохранить в избранное
      tags:
      - mark
  /api/v1/mark/:post_id:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Mark'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удалить в избранное
      tags:
      - mark
  /api/v1/notification:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_PushNotification'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить уведомления
      tags:
      - notification
  /api/v1/orders:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список моих заказов
      tags:
      - product
  /api/v1/post:
    get:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        type: string
      - description: collection_id
        in: query
        name: collection_id
        type: string
      - description: language
        in: query
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_PostResponseByGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список группированных постов
      tags:
      - post
  /api/v1/post/archive:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_schema_ArchivePost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: архивные посты
      tags:
      - post
  /api/v1/post/check-quiz:
    get:
      consumes:
      - application/json
      parameters:
      - description: post_id
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_UserPost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: проверить что квиз прочитан
      tags:
      - post
  /api/v1/post/filter:
    get:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        type: string
      - description: collection_id
        in: query
        name: collection_id
        type: string
      - description: language
        in: query
        name: language
        required: true
        type: string
      - description: search
        in: query
        name: search
        type: string
      - description: post_id
        in: query
        name: post_ids
        type: string
      - description: all, post, partner
        in: query
        name: post_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_schema_PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: список постов с фильтром
      tags:
      - post
  /api/v1/post/read:
    post:
      consumes:
      - application/json
      parameters:
      - description: post
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.ReadPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_ReadPostRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: прочесть книгу
      tags:
      - post
  /api/v1/post/save-quiz:
    post:
      consumes:
      - application/json
      parameters:
      - description: post
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.PassQuizPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_UserPost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: сохраниь что квиз прочитан
      tags:
      - post
  /api/v1/privacy-terms:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_PrivacyTerms'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить все коллекций
      tags:
      - privacy-terms
  /api/v1/product:
    get:
      consumes:
      - application/json
      parameters:
      - description: product_tag_id
        in: query
        name: product_tag_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список товаров
      tags:
      - product
  /api/v1/product/buy:
    post:
      consumes:
      - application/json
      parameters:
      - description: post
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.ProductBuyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: покупка товара
      tags:
      - product
  /api/v1/recommendation:
    get:
      consumes:
      - application/json
      parameters:
      - description: language
        in: query
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Collection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить все рекомендаций
      tags:
      - collection
  /api/v1/referral:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ReferralCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить реферал код юзера
      tags:
      - referral
    post:
      consumes:
      - application/json
      parameters:
      - description: referralCode
        in: query
        name: referralCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_ReferralCode'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: пометить прочитанным сторис
      tags:
      - referral
  /api/v1/referral/available:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_CheckAvailable'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить активность рефералки
      tags:
      - referral
  /api/v1/stories:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Stories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить список сторисов
      tags:
      - stories
    post:
      consumes:
      - application/json
      parameters:
      - description: story_page_id
        in: query
        name: story_page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: пометить сторис прочитанным
      tags:
      - stories
    put:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateStories'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Stories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: обновить сторис
      tags:
      - stories
  /api/v1/stories/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_Stories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить список сторисов
      tags:
      - stories
  /api/v1/stories/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateStories'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Stories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: создать сторис
      tags:
      - stories
  /api/v1/stories/id:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: stories_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить сторис
      tags:
      - stories
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: stories_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Stories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить список сторисов
      tags:
      - stories
  /api/v1/story-page:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: query
        name: story_page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: удалить страницу в сторис
      tags:
      - stories
    post:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.CreateStories'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: добавить страницу в сторис
      tags:
      - stories
    put:
      consumes:
      - application/json
      parameters:
      - description: CreateProduct data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateStories'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: обновить страницу в сторис
      tags:
      - stories
  /api/v1/tags:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_ProductTag'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список тегов продуктов(фильтра)
      tags:
      - product
  /api/v1/user:
    put:
      consumes:
      - application/json
      parameters:
      - description: user update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: обновить пользователя
      tags:
      - user
  /api/v1/user-device-token:
    delete:
      consumes:
      - application/json
      parameters:
      - description: deviceTokenId
        in: query
        name: deviceTokenId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удалить токен девайса токены пользователя
      tags:
      - user-device-token
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_model_UserDeviceToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: получить токен девайса токены пользователя
      tags:
      - user-device-token
    post:
      consumes:
      - application/json
      parameters:
      - description: Create device token
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/schema.UserDeviceTokenCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_UserDeviceToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: сохранить токен девайса токена
      tags:
      - user-device-token
  /api/v1/user/:user_id:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: удалить пользователя
      tags:
      - user
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: получить пользователя
      tags:
      - user
  /api/v1/user/mark:
    get:
      consumes:
      - application/json
      parameters:
      - description: all, post, partner
        in: query
        name: filter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_schema_PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      security:
      - BearerAuth: []
      summary: все избранное пользователя
      tags:
      - mark
  /api/v2/post:
    get:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        type: integer
      - description: collection_id
        in: query
        name: collection_id
        type: integer
      - description: language
        in: query
        name: language
        required: true
        type: string
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-schema_PostResponseByGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список группированных постов
      tags:
      - post
  /api/v2/post/filter:
    get:
      consumes:
      - application/json
      parameters:
      - description: hashtag_id
        in: query
        name: hashtag_id
        type: string
      - description: collection_id
        in: query
        name: collection_id
        type: string
      - description: language
        in: query
        name: language
        required: true
        type: string
      - description: search
        in: query
        name: search
        type: string
      - description: post_ids
        in: query
        name: post_ids
        type: string
      - description: all, post, partner
        in: query
        name: post_type
        required: true
        type: string
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: size
        in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Response-array_schema_PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.Response-schema_Empty'
      summary: список постов с фильтром
      tags:
      - post
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
